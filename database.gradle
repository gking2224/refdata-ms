
import java.util.regex.Pattern.Branch;

import me.gking2224.awsplugin.task.CreateInstanceTask
import me.gking2224.buildtools.tasks.RemoteExec
import me.gking2224.dbgp.plugin.task.ExecuteDatabaseScript

buildscript {
    repositories {
        mavenLocal()
        mavenCentral()
        jcenter()
//        maven {
//            url 'https://artifactory.gking2224.me/artifactory/libs-snapshot'
//        }
//        maven {
//            url 'https://artifactory.gking2224.me/artifactory/libs-release'
//        }
        maven { url "https://plugins.gradle.org/m2/" }
    }
    dependencies {
        classpath "me.gking2224:BuildToolsGradlePlugin:0.1.8-SNAPSHOT"
        classpath "me.gking2224:AmazonAWSGradlePlugin:0.1.8-SNAPSHOT"
        classpath "me.gking2224:DatabaseBuildGradlePlugin:0.1.0-SNAPSHOT"
        classpath "mysql:mysql-connector-java:5.1.39"
    }
}
apply plugin: 'me.gking2224.buildtools'
apply plugin: 'me.gking2224.awsplugin'
apply plugin: 'me.gking2224.databasebuild'

repositories {
  mavenCentral()
}

//task createDatabaseServer(type:CreateInstanceTask) {
//    imageId = {databaseAmi}
//    instanceType = "t2.micro"
//    securityGroup = "restricted"
//    postInitWaitTime = 60
//}
//
//createDatabaseServer << {
//    project.envProps.database.host = publicDnsName
//}
task createDatabaseServer << {
    
}
configurations.all {
    exclude group: 'org.slf4j', module: 'log4j-over-slf4j'
}

configurations {
    driver {
        dependencies {
            runtime "mysql:mysql-connector-java:5.1.39"
        }
    }
}
//dependencies {
//    driver
//}

URLClassLoader loader = GroovyObject.class.classLoader
configurations.driver.each {File file ->
//    loader.addURL(file.toURI().toURL())
}

task makeDatabase(type:me.gking2224.dbgp.plugin.task.ExecuteDatabaseScript) {
    port = {envProps.database.port}
    host = {envProps.database.host}
    databaseName = {envProps.database.root.name}
    username = {envProps.database.root.username}
    password = {envProps.database.root.password}
    ext.appDatabaseUser = {envProps.database.username}
    ext.appDatabasePassword = {envProps.database.password}
    ext.appDatabaseName = {envProps.database.name}
    statement {
        failOnError = false
        statement = {"drop user '${appDatabaseUser}'@'localhost'"}
        statement = {"drop user '${appDatabaseUser}'@'%'"}
    }
    file dbDir, "createDatabaseAndUser.sql"
}
//makeDatabase.mustRunAfter createDatabaseServer
makeDatabase.doFirst {
    if (project.env == "prod") assert project.hasProperty("forceProd")
}

task makeSchema(type:me.gking2224.dbgp.plugin.task.ExecuteDatabaseScript) {
    port = {envProps.database.port}
    host = {envProps.database.host}
    databaseName = {envProps.database.name}
    username = {envProps.database.username}
    password = {envProps.database.password}
    files {
        dir = new File(project.dbDir, "model")
        pattern= /.*.sql/
    }
}
makeSchema.mustRunAfter makeDatabase
makeSchema.doFirst {
    if (project.env == "prod") assert project.hasProperty("forceProd")
}

task deployDbCode(type:me.gking2224.dbgp.plugin.task.ExecuteDatabaseScript) {
    port = {envProps.database.port}
    host = {envProps.database.host}
    databaseName = {envProps.database.name}
    username = {envProps.database.username}
    password = {envProps.database.password}
    files {
        dir = new File(project.dbDir, "code")
        pattern= /.*.sql/
    }
}

deployDbCode.mustRunAfter makeSchema

task deployDbSeedData(type:me.gking2224.dbgp.plugin.task.ExecuteDatabaseScript) {
    port = {envProps.database.port}
    host = {envProps.database.host}
    databaseName = {envProps.database.name}
    username = {envProps.database.username}
    password = {envProps.database.password}
    files {
        dir = new File(project.dbDir, "seedData")
        pattern= /.*.sql/
    }
}
deployDbSeedData.mustRunAfter deployDbCode

task deployDbFull(dependsOn:[makeSchema, deployDbCode, deployDbSeedData])
task deployDbFullOnNewServer(dependsOn:[createDatabaseServer,makeDatabase,deployDbFull])
